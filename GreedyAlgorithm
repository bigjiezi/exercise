# -*- coding: utf-8 -*-
"""
Created on Wed Apr  3 10:46:24 2019

@author: bigjie
"""

#TSP贪心算法
import numpy as np
import time
coordinates = np.array([[565.0,575.0],[25.0,185.0],[345.0,750.0],[945.0,685.0],[845.0,655.0],
                        [880.0,660.0],[25.0,230.0],[525.0,1000.0],[580.0,1175.0],[650.0,1130.0],
                        [1605.0,620.0],[1220.0,580.0],[1465.0,200.0],[1530.0,  5.0],[845.0,680.0],
                        [725.0,370.0],[145.0,665.0],[415.0,635.0],[510.0,875.0],[560.0,365.0],
                        [300.0,465.0],[520.0,585.0],[480.0,415.0],[835.0,625.0],[975.0,580.0],
                        [1215.0,245.0],[1320.0,315.0],[1250.0,400.0],[660.0,180.0],[410.0,250.0],
                        [420.0,555.0],[575.0,665.0],[1150.0,1160.0],[700.0,580.0],[685.0,595.0],
                        [685.0,610.0],[770.0,610.0],[795.0,645.0],[720.0,635.0],[760.0,650.0],
                        [475.0,960.0],[95.0,260.0],[875.0,920.0],[700.0,500.0],[555.0,815.0],
                        [830.0,485.0],[1170.0, 65.0],[830.0,610.0],[605.0,625.0],[595.0,360.0],
                        [1340.0,725.0],[1740.0,245.0]])
#def distance_array(coordinates):
start=time.process_time()
town_num=coordinates.shape[0]
dis_arr=np.zeros((town_num,town_num))
for i in range(town_num):
    for j in range(town_num):
        dis_arr[i][j]=dis_arr[j][i]=np.linalg.norm(coordinates[i]-coordinates[j])
 #return dis_arr

start_town=int(input('Which city do you want to start from? Please input it\'s number:'))
step=1
current_town=0
path_sum=0
traveled_city=[]
traveled_city.append(start_town)
#start=time.process_time()
while True:
    k=0
    Dis_temp=1000000
    while True:
        flag=0
        if k in traveled_city:
            flag=1
        if flag == 0 and dis_arr[k][traveled_city[step-1]] < Dis_temp:
            current_town=k
            Dis_temp=dis_arr[k][traveled_city[step-1]]
        k+=1
        if k>=town_num:
            break
    traveled_city.append(current_town)
    step+=1
    path_sum+=Dis_temp
    if step>=town_num:
        break
end=time.process_time()

print("Start from city %d"%start_town)
print("The best value is %d"%path_sum)
print("The best travel routing is:")
for i in range(len(traveled_city)-1):
    print('city %d'%traveled_city[i],end='->')
print('city %d'%traveled_city[-1])
print('Search best value by Greedy Algorithm need %.10ss'%(end-start))
