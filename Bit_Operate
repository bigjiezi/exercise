# -*- coding: utf-8 -*-
"""
Created on Wed Mar 27 15:36:37 2019

@author: bigjie
"""
#import math
#位运算

class Bit_operation(object):
    def __init__(self,num_1,num_2):
        self.num_1=num_1
        self.num_2=num_2
#十进制变二进制
    def dec2bin(self,num):
        l=[]
        temp=num
        if num<0:
            return '-'+self.dec2bin(abs(num))
        while True:
            num,remainder=divmod(num,2)
            l.append(str(remainder))
            if num==0:
                print('{}对应二进制列表,左边是低位:'.format(temp),l)
                return l
            
#输入两个10进制数，返回对应二进制数的交
    def bin_associate(self,l_1,l_2):
#        l_1=self.dec2bin(self.num_1)
#        l_2=self.dec2bin(self.num_2)
        count=0
        length=min(len(l_1),len(l_2))
        for i in range(length):
            if l_1[i]=='1' and l_2[i]=='1':
                count+=1
        return count
#求并集
    def bin_union(self,l_1,l_2):
        count=0
        length_1=min(len(l_1),len(l_2))
        length_2=max(len(l_1),len(l_2))
        for i in range(length_1):
            if l_1[i]=='1' or l_2[i]=='1':
                count+=1
        for j in range(length_1,length_2):
            if len(l_1)<len(l_2):
                if l_2[j]=='1':
                    count+=1
            else:
                if l_1[j]=='1':
                    count+=1
        return count
    
#求异或
    def bin_xor(self,l_1,l_2):
        count=0
        length_1=min(len(l_1),len(l_2))
        length_2=max(len(l_1),len(l_2))
        for i in range(length_1):
            if l_1[i] != l_2[i]:
                count+=1
        for j in range(length_1,length_2):
            if len(l_1)<len(l_2):
                if l_2[j]=='1':
                    count+=1
            else:
                if l_1[j]=='1':
                    count+=1
        return count
#求左右移
    def bin_bit_move(self,l,direction,move_num):
        if direction=='r':
            if move_num>len(l):
                print('Move too much!!')
                return False
            for i in range(move_num):
                del l[0]
        if direction=='l':
            for i in range(move_num):
                l.insert(0,'0')
        return l


#主函数
    def main(self):
        l_1=self.dec2bin(self.num_1)
        l_2=self.dec2bin(self.num_2)
        print('取交后结果(二进制)：',''.join(self.dec2bin(self.bin_associate(l_1,l_2))[::-1]))
        print('取并后结果(二进制)：',''.join(self.dec2bin(self.bin_union(l_1,l_2))[::-1]))
        print('取异或后结果(二进制)：',''.join(self.dec2bin(self.bin_xor(l_1,l_2))[::-1]))
        direction,move_num=input('请输入要左移还是右移(左移输入l,右移输入r),移动几位(别超过10哦),ps:两次输入用空格隔开：').split()
        print('移位前(二进制)：',''.join(self.dec2bin(self.num_1)[::-1]))
        print('移位后结果(二进制)：',''.join(self.bin_bit_move(l_1,direction,int(move_num))[::-1]))


if __name__=='__main__':
    num_1,num_2=eval(input('请输入两个数字：'))
    practice=Bit_operation(num_1,num_2)
    practice.main()        
